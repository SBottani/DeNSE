#!/usr/bin/env python
#-*- coding:utf-8 -*-

import os
import sysconfig
from distutils.command.build_ext import build_ext
from setuptools import setup, Extension, find_packages

import numpy as np

try:
    from Cython.Build import cythonize
    import setuptools
    version = setuptools.__version__
    version = int(version[:version.index(".")])
    with_cython = True if version >= 18 else False
    from _cpp_header import clean_cpp
    with_cython = True
except ImportError:
    with_cython = False


# ------------------- #
# Multiplatform flags #
# ------------------- #

# compiler options

copt =  {
    'msvc': ['/openmp', '/O2', '/fp:precise',],
    'unix': [
        '-std=c++11', '-Wno-cpp', '-Wno-unused-function', '-fopenmp',
        '-ffast-math', '-msse', '-ftree-vectorize', '-O2', '-g', "-fPIC",
    ],
}

lopt =  {
    'unix': ['-fopenmp'],
}

# custom class

class CustomBuildExt(build_ext):

    def build_extensions(self):
        # find environment variable for compiler
        c = os.environ.get('CXX', None)
        # or configuration
        if c is None:
            c = sysconfig.get_config_var('CXX')
        # or default value
        if c is None:
            from distutils import ccompiler
            c = ccompiler.get_default_compiler()
        # normalize names
        if "g++" in c or "gcc" in c or "mingw" in c or "clang" in c:
            c = "unix"
        elif "msvc" in c:
            c = "msvc"

        try:
            self.compiler.compiler_so.remove("-Wstrict-prototypes")
            self.compiler.compiler_so.remove("-O3")
        except:
            pass

        for e in self.extensions:
            e.extra_link_args.extend(lopt.get(c, []))
            e.extra_compile_args.extend(copt.get(c, []))

        build_ext.build_extensions(self)


# ------------------------------------- #
# Extension to link C++ files to python #
# ------------------------------------- #

mod_name = 'NetGrowth'

ext = '.pyx' if with_cython else '.cpp'

extensions = Extension(
    mod_name + "._pygrowth", # name of extension
    sources = ['@PYMODULE_DIR@/' + mod_name + '/_pygrowth' + ext],
    language = "c++",
    include_dirs = [
        '@PROJECT_SOURCE_DIR@',
        '@PROJECT_SOURCE_DIR@/kernel',
        '@PROJECT_SOURCE_DIR@/elements',
        '@PROJECT_SOURCE_DIR@/libgrowth',
        '@PROJECT_SOURCE_DIR@/spatial',
        '@PYMODULE_DIR@/' + mod_name,
        np.get_include()
    ],
    extra_compile_args = [],
    extra_link_args = [],
    libraries = ['cgrowth'],
    library_dirs = ['@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@'],
    runtime_library_dirs = ['@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@']
)

if with_cython:
    extensions = cythonize(extensions, gdb_debug=True)
    clean_cpp('@PYMODULE_DIR@/' + mod_name + '/_pygrowth.cpp')
else:
    extensions = [extensions]


# ----- #
# Setup #
# ----- #

setup(
    name = mod_name,
    version = '@cgrowth_VERSION_VERSION@',
    description = 'Package to study the growth of neuronal networks',
    package_dir = {mod_name: '@PYMODULE_DIR@/' + mod_name},
    packages = find_packages('@PYMODULE_DIR@'),

    # Include the non python files (c++ library):
    package_data = {mod_name: ['*.so', '*.dll', '*.a', '*.dylib', '*.pxd']},

    ext_modules = extensions,
    cmdclass = {'build_ext': CustomBuildExt},

    author = 'Tanguy Fardet and Alessio Quaresima',
    author_email = 'tanguy.fardet@univ-paris-diderot.fr',
    license = 'GNU',
    keywords = 'neuronal network growth simulation topology',
    zip_safe = False
)
